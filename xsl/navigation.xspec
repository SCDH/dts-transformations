<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:map="http://www.w3.org/2005/xpath-functions/map"
    xmlns:array="http://www.w3.org/2005/xpath-functions/array"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:dts="https://distributed-text-services.github.io/specifications/"
    xmlns:t="http://www.tei-c.org/ns/1.0" stylesheet="navigation.xsl" run-as="external">

    <x:variable name="x:saxon-config" href="../test/saxon.xml"/>

    <x:scenario label="presence of properties of Navigation">
        <x:context href="../test/4ezr.xml"/>
        <x:expect label="has @context" test="map:contains(., '@context')"/>
        <x:expect label="has dtsVersion" test="map:contains(., 'dtsVersion')"/>
        <x:expect label="has @type" test="map:contains(., '@type')"/>
        <x:expect label="@type is Navigation" test="map:get(., '@type') => string()"
            select="'Navigation'"/>
        <x:expect label="has @id" test="map:contains(., '@id')"/>
        <x:expect label="has resource" test="map:contains(., 'resource')"/>
        <x:expect label="has member" test="map:contains(., 'member')"/>
    </x:scenario>

    <x:scenario label="presence of properties of Resource object">
        <x:context href="../test/4ezr.xml"/>
        <x:expect label="has @id" test="map:get(., 'resource') => map:contains('@id')"/>
        <x:expect label="has @type" test="map:get(., 'resource') => map:contains('@type')"/>
        <x:expect label="@type is Resource"
            test="map:get(., 'resource') => map:get('@type') => string()" select="'Resource'"/>
        <x:expect label="has document" test="map:get(., 'resource') => map:contains('document')"/>
        <x:expect label="has collection" test="map:get(., 'resource') => map:contains('collection')"/>
        <x:expect label="has navigation" test="map:get(., 'resource') => map:contains('navigation')"/>
        <x:expect label="has citationTrees"
            test="map:get(., 'resource') => map:contains('citationTrees')"/>
    </x:scenario>

    <x:scenario label="systemId is not provided as resource stylesheet parameter">
        <x:context href="../test/4ezr.xml"/>
        <x:expect label="global context's base-uri as resource/@id"
            test="map:get(., 'resource') => map:get('@id')" select="$x:context => base-uri()"/>
        <x:expect label="global context's base uri is in /@id"
            test="map:get(., '@id') => matches('4ezr\.xml')"/>
    </x:scenario>

    <x:scenario label="resource systemId is provided as resource stylesheet parameter">
        <x:param name="resource" select="'https://en.wikisource.org/wiki/Dracula'"/>
        <x:context href="../test/4ezr.xml"/>
        <x:expect label="source base-uri as resource/@id"
            test="map:get(., 'resource') => map:get('@id')"
            select="'https://en.wikisource.org/wiki/Dracula'"/>
        <x:expect label="global context's base uri is in /@id"
            test="map:get(., '@id') => matches('Dracula')"/>
    </x:scenario>

    <x:scenario label="citationTrees in 4ezr.xml">
        <x:context href="../test/4ezr.xml"/>
        <x:expect label="has 1 citationTree"
            test="map:get(., 'resource') => map:get('citationTrees') => array:size()" select="1"/>
        <x:expect label="1st CitationTree has @type"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:contains('@type')"/>
        <x:expect label="1st CitationTree is a dts:CitationTree"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('@type') => string()"
            select="'CitationTree'"/>
        <x:expect label="1st CitationTree is the default citation tree and thus has no identifier"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:contains('identifier') => not()"/>
        <x:expect label="1st CitationTree has citeStructure"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:contains('@type')"/>
        <!-- dive into level 1 citeStructure -->
        <x:expect label="onyl one level 1 citeStructure"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:size()"
            select="1"/>
        <x:expect label="level 1 citeStructure has @type"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:contains('@type')"/>
        <x:expect label="level 1 citeStructure has @type"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:get('@type') => string()"
            select="'CiteStructure'"/>
        <x:expect label="level 1 citeStructure has citeType"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:get('citeType') => string()"
            select="'book'"/>
        <x:expect label="level 1 citeStructure has nested citeStructure"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:contains('citeStructure')"/>
        <!-- dive into level 2 citeStructure -->
        <x:expect label="only one level 2 citeStructure"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:get('citeStructure') => array:size()"
            select="1"/>
        <x:expect label="level 2 citeStructure has @type"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:get('citeStructure') => array:get(1) => map:contains('@type')"/>
        <x:expect label="level 2 citeStructure has citeType"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:get('citeStructure') => array:get(1) => map:contains('citeType')"/>
        <x:expect label="level 2 citeStructure has citeStructure"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:get('citeStructure') => array:get(1) => map:contains('citeStructure')"
        />
    </x:scenario>

    <x:scenario label="members in 4ezr.xml">
        <x:context href="../test/4ezr.xml"/>
        <!-- diving into member 1 -->
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="10"/>
        <x:expect label="member 1 has identifier"
            test="map:get(., 'member') => array:get(1) => map:contains('identifier')"/>
        <x:expect label="member 1 has @type"
            test="map:get(., 'member') => array:get(1) => map:contains('@type')"/>
        <x:expect label="member 1 has level"
            test="map:get(., 'member') => array:get(1) => map:contains('level')"/>
        <x:expect label="member 1 has parent"
            test="map:get(., 'member') => array:get(1) => map:contains('parent')"/>
        <x:expect label="member 1 has citeType"
            test="map:get(., 'member') => array:get(1) => map:contains('citeType')"/>
        <x:expect label="member 1 is first in document order"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'4 Ezra'"/>
        <x:expect label="member 1 is a CitableUnit"
            test="map:get(., 'member') => array:get(1) => map:get('@type') => string()"
            select="'CitableUnit'"/>
        <x:expect label="member 1 is in level 1"
            test="map:get(., 'member') => array:get(1) => map:get('level')" select="1"/>
        <x:expect label="member 1 has no parent"
            test="map:get(., 'member') => array:get(1) => map:get('parent')" select="()"/>
        <x:expect label="member 1 has correct citeType"
            test="map:get(., 'member') => array:get(1) => map:get('citeType') => string()"
            select="'book'"/>
    </x:scenario>

    <x:scenario label="default citation tree: default citation tree of matt.xml">
        <x:context href="../test/matt.xml"/>
        <x:expect label="has 2 citationTrees"
            test="map:get(., 'resource') => map:get('citationTrees') => array:size()" select="2"/>
        <x:expect label="1st CitationTree is the default citation tree and thus has no identifier"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:contains('identifier') => not()"/>
        <x:expect label="2nd CitationTree has identifier"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(2) => map:contains('identifier')"/>
        <x:expect label="2nd CitationTree has identifier 'pages'"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(2) => map:get('identifier') => string()"
            select="'pages'"/>
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="15"/>
    </x:scenario>

    <x:scenario label="named citation tree: 'pages' citation tree of matt.xml">
        <x:param name="tree" select="'pages'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="has 2 citationTrees"
            test="map:get(., 'resource') => map:get('citationTrees') => array:size()" select="2"/>
        <x:expect label="1st CitationTree is the default citation tree and thus has no identifier"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:contains('identifier') => not()"/>
        <x:expect label="2nd CitationTree has identifier"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(2) => map:contains('identifier')"/>
        <x:expect label="2nd CitationTree has identifier 'pages'"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(2) => map:get('identifier') => string()"
            select="'pages'"/>
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="2"/>
        <x:expect label="no ref property" test="map:contains(., 'ref') => not()"/>
        <x:expect label="no start property" test="map:contains(., 'start') => not()"/>
        <x:expect label="no end property" test="map:contains(., 'end') => not()"/>
    </x:scenario>

    <x:scenario label="from start to end in matt.xml">
        <x:param name="start" select="'Matt:1:3'"/>
        <x:param name="end" select="'Matt:2:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="4"/>
        <x:expect label="only level 3 members"
            test="map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level')})"
            select="array {3, 3, 3, 3}"/>
        <x:expect label="start is first member"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'Matt:1:3'"/>
        <x:expect label="end is last member"
            test="map:get(., 'member') => array:get(4) => map:get('identifier') => string()"
            select="'Matt:2:2'"/>
        <x:expect label="no ref property" test="map:contains(., 'ref') => not()"/>
    </x:scenario>

    <x:scenario label="from start to end in matt.xml with end a last child">
        <x:param name="start" select="'Matt:1:3'"/>
        <x:param name="end" select="'Matt:2:3'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="6"/>
        <x:expect label="only level 2 and 3 members"
            test="map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level')})"
            select="array {3, 3, 2, 3, 3, 3}"/>
        <x:expect label="start is first member"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'Matt:1:3'"/>
        <x:expect label="end is last member"
            test="map:get(., 'member') => array:get(6) => map:get('identifier') => string()"
            select="'Matt:2:3'"/>
        <x:expect label="start property on Navigation object"
            test="map:get(., 'start') => map:get('identifier') => string()" select="'Matt:1:3'"/>
        <x:expect label="end property on Navigation object"
            test="map:get(., 'end')  => map:get('identifier') => string()" select="'Matt:2:3'"/>
        <x:expect label="no ref property" test="map:contains(., 'ref') => not()"/>
    </x:scenario>

    <x:scenario label="from start to end in matt.xml with start first child and end a last child">
        <x:param name="start" select="'Matt:2:1'"/>
        <x:param name="end" select="'Matt:2:3'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="3"/>
        <x:expect label="only level 2 and 3 members"
            test="map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level')})"
            select="array {3, 3, 3}"/>
        <x:expect label="start is first member"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'Matt:2:1'"/>
        <x:expect label="end is last member"
            test="map:get(., 'member') => array:get(3) => map:get('identifier') => string()"
            select="'Matt:2:3'"/>
        <x:expect label="start property on Navigation object"
            test="map:get(., 'start') => map:get('identifier') => string()" select="'Matt:2:1'"/>
        <x:expect label="end property on Navigation object"
            test="map:get(., 'end')  => map:get('identifier') => string()" select="'Matt:2:3'"/>
        <x:expect label="no ref property" test="map:contains(., 'ref') => not()"/>
    </x:scenario>

    <x:scenario label="ref in matt.xml">
        <x:param name="ref" select="'Matt:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="4"/>
        <x:expect label="ref property on Navigation object"
            test="map:get(., 'ref') => map:get('identifier') => string()" select="'Matt:2'"/>
        <x:expect label="no start property" test="map:contains(., 'start') => not()"/>
        <x:expect label="no end property" test="map:contains(., 'end') => not()"/>
    </x:scenario>

    <x:scenario label="down to level 1 in matt.xml">
        <x:param name="down" select="1"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="1"/>
        <x:expect label="maximum depth as given by $down parameter"
            test="(map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level') => xs:integer()})) => max()"
            select="1"/>
    </x:scenario>

    <x:scenario label="down to level 2 in matt.xml">
        <x:param name="down" select="2"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="4"/>
        <x:expect label="maximum depth as given by $down parameter"
            test="(map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level') => xs:integer()})) => max()"
            select="2"/>
    </x:scenario>

    <x:scenario label="down to level 3 in matt.xml">
        <x:param name="down" select="3"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="maximum depth as given by $down parameter"
            test="(map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level') => xs:integer()})) => min()"
            select="1"/>
        <x:expect label="maximum depth as given by $down parameter"
            test="(map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level') => xs:integer()})) => max()"
            select="3"/>
    </x:scenario>

    <x:scenario label="down to level 4 in matt.xml">
        <x:param name="down" select="4"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="maximum depth as given by $down parameter"
            test="(map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level') => xs:integer()})) => min()"
            select="1"/>
        <x:expect label="maximum depth as given by $down parameter"
            test="(map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level') => xs:integer()})) => max()"
            select="3"/>
    </x:scenario>

    <x:scenario label="down empty with $ref to second chapter in matt.xml">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="'Matt:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="no member property" test="map:contains(., 'member') => not()"/>
        <x:expect label="ref property has correct identifier"
            test="map:get(., 'ref') => map:get('identifier') => string()" select="'Matt:2'"/>
        <x:expect label="ref property has correct level"
            test="map:get(., 'ref') => map:get('level')" select="2"/>
    </x:scenario>

    <x:scenario label="down emtpy with $start and $end in matt.xml">
        <x:param name="down" select="()"/>
        <x:param name="start" select="'Matt:1:3'"/>
        <x:param name="end" select="'Matt:2:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="no member property" test="map:contains(., 'member') => not()"/>
        <x:expect label="start property has correct identifier"
            test="map:get(., 'start') => map:get('identifier') => string()" select="'Matt:1:3'"/>
        <x:expect label="start property has correct level"
            test="map:get(., 'start') => map:get('level')" select="3"/>
        <x:expect label="end property has correct identifier"
            test="map:get(., 'end') => map:get('identifier') => string()" select="'Matt:2:2'"/>
        <x:expect label="end property has correct level"
            test="map:get(., 'end') => map:get('level')" select="3"/>
    </x:scenario>

    <x:scenario label="down 0 with $ref to first chapter in matt.xml">
        <x:param name="down" select="0"/>
        <x:param name="ref" select="'Matt:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="has member property" test="map:contains(., 'member')"/>
        <x:expect label="has correct members count" test="map:get(., 'member') => array:size()"
            select="3"/>
        <x:expect label="all members siblings"
            test="map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level')})"
            select="array { 2, 2, 2 }"/>
        <x:expect label="ref property has correct identifier"
            test="map:get(., 'ref') => map:get('identifier') => string()" select="'Matt:2'"/>
        <x:expect label="ref property has correct level"
            test="map:get(., 'ref') => map:get('level')" select="2"/>
    </x:scenario>

    <x:scenario label="down 0 with $ref to Matt:2:2 in matt.xml">
        <x:param name="down" select="0"/>
        <x:param name="ref" select="'Matt:2:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="has member property" test="map:contains(., 'member')"/>
        <x:expect label="has correct members count" test="map:get(., 'member') => array:size()"
            select="3"/>
        <x:expect label="all members siblings"
            test="map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level')})"
            select="array { 3, 3, 3 }"/>
        <x:expect label="ref property has correct identifier"
            test="map:get(., 'ref') => map:get('identifier') => string()" select="'Matt:2:2'"/>
        <x:expect label="ref property has correct level"
            test="map:get(., 'ref') => map:get('level')" select="3"/>
    </x:scenario>

    <x:scenario label="down 0 with $ref to book in matt.xml">
        <x:param name="down" select="0"/>
        <x:param name="ref" select="'Matt'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="has member property" test="map:contains(., 'member')"/>
        <x:expect label="has correct members count" test="map:get(., 'member') => array:size()"
            select="1"/>
        <x:expect label="all members siblings"
            test="map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level')})"
            select="array { 1 }"/>
        <x:expect label="ref property has correct identifier"
            test="map:get(., 'ref') => map:get('identifier') => string()" select="'Matt'"/>
        <x:expect label="ref property has correct level"
            test="map:get(., 'ref') => map:get('level')" select="1"/>
    </x:scenario>

    <x:scenario label="down 1 with $ref to Matt:2:2">
        <x:param name="down" select="1"/>
        <x:param name="ref" select="'Matt:2:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="has member property" test="map:contains(., 'member')"/>
        <x:expect label="has correct members count" test="map:get(., 'member') => array:size()"
            select="1"/>
    </x:scenario>

    <x:scenario label="down 1 with $ref to Matt:2">
        <x:param name="down" select="1"/>
        <x:param name="ref" select="'Matt:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="has member property" test="map:contains(., 'member')"/>
        <x:expect label="has correct members count" test="map:get(., 'member') => array:size()"
            select="4"/>
    </x:scenario>


    <x:scenario label="initial template: resource is provided as resource stylesheet parameter">
        <x:param name="resource" select="'../test/4ezr.xml'"/>
        <x:call xmlns:xsl="http://www.w3.org/1999/XSL/Transform" template="xsl:initial-template"/>
        <x:expect label="global context's base-uri as resource/@id"
            test="map:get(., 'resource') => map:get('@id') => matches('/test/4ezr.xml$')"/>
        <x:expect label="global context's base uri is in /@id"
            test="map:get(., '@id') => matches('4ezr\.xml')"/>
        <x:expect label="resource is parsed: correct count of members"
            test="map:get(., 'member') => array:size()" select="10"/>
    </x:scenario>


    <x:scenario label="error: $ref and $start + $end given" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="'Matt:2'"/>
        <x:param name="start" select="'Matt:1:2'"/>
        <x:param name="end" select="'Matt:2:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="400 error code" test="$x:result?err?code => string() => matches('400')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is"
            test="matches($x:result?err?value, 'bad parameter combination')"/>
    </x:scenario>

    <x:scenario label="error: $start present, but $end not" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="()"/>
        <x:param name="start" select="'Matt:1:2'"/>
        <x:param name="end" select="()"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="400 error code" test="$x:result?err?code => string() => matches('400')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is"
            test="matches($x:result?err?value, 'bad parameter combination')"/>
    </x:scenario>

    <x:scenario label="error: $start not present, but $end" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="()"/>
        <x:param name="start" select="()"/>
        <x:param name="end" select="'Matt:1:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="400 error code" test="$x:result?err?code => string() => matches('400')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is"
            test="matches($x:result?err?value, 'bad parameter combination')"/>
    </x:scenario>


    <x:scenario label="error: member specified by $ref not found" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="'Matt:42'"/>
        <x:param name="start" select="()"/>
        <x:param name="end" select="()"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="404 error code" test="$x:result?err?code => string() => matches('404')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is" test="matches($x:result?err?value, 'not found')"/>
    </x:scenario>

    <x:scenario label="error: member specified by $start not found" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="()"/>
        <x:param name="start" select="'Matt:1:42'"/>
        <x:param name="end" select="'Matt:2:3'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="404 error code" test="$x:result?err?code => string() => matches('404')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is" test="matches($x:result?err?value, 'not found')"/>
    </x:scenario>

    <x:scenario label="error: $tree not found" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="()"/>
        <x:param name="start" select="'Matt:1:2'"/>
        <x:param name="end" select="'Matt:2:3'"/>
        <x:param name="tree" select="'zebra'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="404 error code" test="$x:result?err?code => string() => matches('404')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is" test="matches($x:result?err?value, 'not found')"/>
    </x:scenario>


    <x:scenario label="error: member specified by $end not found" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="()"/>
        <x:param name="start" select="'Matt:1:3'"/>
        <x:param name="end" select="'Matt:42'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="404 error code" test="$x:result?err?code => string() => matches('404')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is" test="matches($x:result?err?value, 'not found')"/>
    </x:scenario>


    <x:scenario label="error: none of $down, $ref, $start, $end" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="()"/>
        <x:param name="start" select="()"/>
        <x:param name="end" select="()"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="400 error code" test="$x:result?err?code => string() => matches('400')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is"
            test="matches($x:result?err?value, 'bad parameter combination')"/>
    </x:scenario>

    <x:scenario label="error: $down = 0 and none of $ref, $start, $end" catch="yes">
        <x:param name="down" select="0"/>
        <x:param name="ref" select="()"/>
        <x:param name="start" select="()"/>
        <x:param name="end" select="()"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="400 error code" test="$x:result?err?code => string() => matches('400')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is"
            test="matches($x:result?err?value, 'bad parameter combination')"/>
    </x:scenario>

    <x:scenario label="error: $down = 0 and $start + $end given" catch="yes">
        <x:param name="down" select="0"/>
        <x:param name="ref" select="()"/>
        <x:param name="start" select="'Matt:1:2'"/>
        <x:param name="end" select="'Matt:2:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="400 error code" test="$x:result?err?code => string() => matches('400')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is"
            test="matches($x:result?err?value, 'bad parameter combination')"/>
    </x:scenario>


    <x:scenario label="bad TEI: missing default citation tree" catch="yes">
        <x:context href="../test/missing-default.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="404 error code" test="$x:result?err?code => string() => matches('404')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is" test="matches($x:result?err?value, 'but found 0')"/>
    </x:scenario>

    <x:scenario label="bad TEI: multiple default citation trees" catch="yes">
        <x:context href="../test/multiple-default.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="404 error code" test="$x:result?err?code => string() => matches('404')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is" test="matches($x:result?err?value, 'but found 2')"/>
    </x:scenario>

    <x:scenario label="bad TEI: unnamed non-default citation tree" catch="yes">
        <x:context href="../test/unnamed.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="404 error code" test="$x:result?err?code => string() => matches('404')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is"
            test="matches($x:result?err?value, 'unlabelled refsDecl')"/>
    </x:scenario>


    <x:scenario label="marked virtual children">
        <x:param name="marked-virtual-children" select="true()" as="xs:boolean"/>
        <x:param name="tree" select="'page-level2-start-end'"/>
        <x:context href="../test/john.xml"/>
        <x:expect label="firt member: p.1"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'p.1'"/>
        <x:expect label="p.1 member does not have a dts:inParentSubtree property"
            test="map:get(., 'member') => array:get(1) => map:contains('dts:inParentSubtree') => not()"/>
        <!--x:expect label="p.1 is contained in its parent's subtree"
            test="map:get(., 'member') => array:get(1) => map:get('dts:inParentSubtree')"/-->
        <!-- page start -->
        <x:expect label="second member: p.1.start"
            test="map:get(., 'member') => array:get(2) => map:get('identifier') => string()"
            select="'p.1.start'"/>
        <x:expect label="p.1.start member has dts:inParentSubtree property"
            test="map:get(., 'member') => array:get(2) => map:contains('dts:inParentSubtree')"/>
        <x:expect label="p.1.start is contained in its parent's subtree"
            test="map:get(., 'member') => array:get(2) => map:get('dts:inParentSubtree')"/>
        <!-- page end -->
        <x:expect label="second member: p.1.end"
            test="map:get(., 'member') => array:get(3) => map:get('identifier') => string()"
            select="'p.1.end'"/>
        <x:expect label="p.1.end member has dts:inParentSubtree property"
            test="map:get(., 'member') => array:get(3) => map:contains('dts:inParentSubtree')"/>
        <x:expect label="p.1.end is not contained in its parent's subtree"
            test="map:get(., 'member') => array:get(3) => map:get('dts:inParentSubtree') => not()"/>
    </x:scenario>


    <x:scenario label="citeData from $tree page-hateoas in john.xml">
        <x:param name="tree" select="'page-hateoas'"/>
        <x:context href="../test/john.xml"/>
        <x:expect label="firt member: p.1"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'p.1'"/>
        <x:expect label="p.1 has ...startMember property"
            test="map:get(., 'member') => array:get(1) => map:contains('dts:startMember')"/>
        <x:expect label="p.1 has ...endMember property"
            test="map:get(., 'member') => array:get(1) => map:contains('dts:endMember')"/>
        <x:expect label="p.1's ...startMember is 'p.1.start"
            test="map:get(., 'member') => array:get(1) => map:get('dts:startMember') => string()"
            select="'p.1.start'"/>
        <x:expect label="p.1's ...endMember is 'p.1.end"
            test="map:get(., 'member') => array:get(1) => map:get('dts:endMember') => string()"
            select="'p.1.end'"/>
        <!-- not present on p.1.start child -->
        <x:expect label="p.1.start has no ...startMember property"
            test="map:get(., 'member') => array:get(2) => map:contains('dts:startMember') => not()"/>
        <x:expect label="p.1.start has no ...endMember property"
            test="map:get(., 'member') => array:get(2) => map:contains('dts:endMember') => not()"/>
    </x:scenario>


    <x:scenario label="Regression issue #7: end on lower level than start an matt.xml">
        <x:param name="start" select="'Matt:1:3'"/>
        <x:param name="end" select="'Matt:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="first member: Matt:1:3"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'Matt:1:3'"/>
    </x:scenario>

    <x:scenario label="Regression issue #7: end on lower level than start on john.xml">
        <x:param name="tree" select="'page-hateoas'"/>
        <x:param name="start" select="'p.1.start'"/>
        <x:param name="end" select="'p.2'"/>
        <x:context href="../test/john.xml"/>
        <x:expect label="firt member: p.1.start"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'p.1.start'"/>
    </x:scenario>

    <x:scenario label="Regression: ordinary page milestones in john.xml">
        <x:param name="tree" select="'page-hateoas'"/>
        <x:param name="start" select="'p.1'"/>
        <x:param name="end" select="'p.2'"/>
        <x:context href="../test/john.xml"/>
        <x:expect label="firt member: p.1"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'p.1'"/>
    </x:scenario>

    <x:scenario label="Regression: virtual subtree at $start in john.xml">
        <x:param name="tree" select="'page-hateoas'"/>
        <x:param name="start" select="'p.1.end'"/>
        <x:param name="end" select="'p.2'"/>
        <x:context href="../test/john.xml"/>
        <x:expect label="first member: p.1.end"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'p.1.end'"/>
    </x:scenario>

    <x:scenario label="Regression: virtual subtree $end in john.xml">
        <x:param name="tree" select="'page-hateoas'"/>
        <x:param name="start" select="'p.1'"/>
        <x:param name="end" select="'p.2.end'"/>
        <x:context href="../test/john.xml"/>
        <x:expect label="first member: p.1"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'p.1'"/>
    </x:scenario>

    <x:scenario label="Regression 8: self-axis milestone at $start in in john.xml">
        <x:param name="tree" select="'page-hateoas'"/>
        <x:param name="start" select="'p.1.start'"/>
        <x:param name="end" select="'p.2'"/>
        <x:context href="../test/john.xml"/>
        <x:expect label="first member: p.1.start"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'p.1.start'"/>
    </x:scenario>

    <x:scenario label="Regression 8: self-axis milestone at $end in in john.xml" pending="issue #8">
        <x:param name="tree" select="'page-hateoas'"/>
        <x:param name="start" select="'p.1'"/>
        <x:param name="end" select="'p.2.start'"/>
        <x:context href="../test/john.xml"/>
        <x:expect label="first member: p.1"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'p.1'"/>
    </x:scenario>

</x:description>
