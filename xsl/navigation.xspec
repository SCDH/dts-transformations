<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:map="http://www.w3.org/2005/xpath-functions/map"
    xmlns:array="http://www.w3.org/2005/xpath-functions/array"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:dts="https://distributed-text-services.github.io/specifications/"
    xmlns:t="http://www.tei-c.org/ns/1.0" stylesheet="navigation.xsl" run-as="external">

    <x:variable name="x:saxon-config" href="../saxon.he.xml"/>

    <x:scenario label="presence of properties of Navigation">
        <x:context href="../test/4ezr.xml"/>
        <x:expect label="has @context" test="map:contains(., '@context')"/>
        <x:expect label="has dtsVersion" test="map:contains(., 'dtsVersion')"/>
        <x:expect label="has @type" test="map:contains(., '@type')"/>
        <x:expect label="@type is Navigation" test="map:get(., '@type') => string()"
            select="'Navigation'"/>
        <x:expect label="has @id" test="map:contains(., '@id')"/>
        <x:expect label="has resource" test="map:contains(., 'resource')"/>
        <x:expect label="has member" test="map:contains(., 'member')"/>
    </x:scenario>

    <x:scenario label="presence of properties of Resource object">
        <x:context href="../test/4ezr.xml"/>
        <x:expect label="has @id" test="map:get(., 'resource') => map:contains('@id')"/>
        <x:expect label="has @type" test="map:get(., 'resource') => map:contains('@type')"/>
        <x:expect label="@type is Resource"
            test="map:get(., 'resource') => map:get('@type') => string()" select="'Resource'"/>
        <x:expect label="has document" pending="not yet"
            test="map:get(., 'resource') => map:contains('document')"/>
        <x:expect label="has collection" pending="not yet"
            test="map:get(., 'resource') => map:contains('collection')"/>
        <x:expect label="has navigation" pending="not yet"
            test="map:get(., 'resource') => map:contains('navigation')"/>
        <x:expect label="has citationTrees"
            test="map:get(., 'resource') => map:contains('citationTrees')"/>
    </x:scenario>

    <x:scenario label="systemId is not provided as resource stylesheet parameter">
        <x:context href="../test/4ezr.xml"/>
        <x:expect label="global context's base-uri as resource/@id"
            test="map:get(., 'resource') => map:get('@id')" select="$x:context => base-uri()"/>
        <x:expect label="global context's base uri is in /@id"
            test="map:get(., '@id') => matches('4ezr\.xml')"/>
    </x:scenario>

    <x:scenario label="resource systemId is provided as resource stylesheet parameter">
        <x:param name="resource" select="'https://en.wikisource.org/wiki/Dracula'"/>
        <x:context href="../test/4ezr.xml"/>
        <x:expect label="source base-uri as resource/@id"
            test="map:get(., 'resource') => map:get('@id')"
            select="'https://en.wikisource.org/wiki/Dracula'"/>
        <x:expect label="global context's base uri is in /@id"
            test="map:get(., '@id') => matches('Dracula')"/>
    </x:scenario>

    <x:scenario label="citationTrees in 4ezr.xml">
        <x:context href="../test/4ezr.xml"/>
        <x:expect label="has 1 citationTree"
            test="map:get(., 'resource') => map:get('citationTrees') => array:size()" select="1"/>
        <x:expect label="1st CitationTree has @type"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:contains('@type')"/>
        <x:expect label="1st CitationTree is a dts:CitationTree"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('@type') => string()"
            select="'CitationTree'"/>
        <x:expect label="1st CitationTree is the default citation tree and thus has no identifier"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:contains('identifier') => not()"/>
        <x:expect label="1st CitationTree has citeStructure"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:contains('@type')"/>
        <!-- dive into level 1 citeStructure -->
        <x:expect label="onyl one level 1 citeStructure"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:size()"
            select="1"/>
        <x:expect label="level 1 citeStructure has @type"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:contains('@type')"/>
        <x:expect label="level 1 citeStructure has @type"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:get('@type') => string()"
            select="'CiteStructure'"/>
        <x:expect label="level 1 citeStructure has citeType"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:get('citeType') => string()"
            select="'book'"/>
        <x:expect label="level 1 citeStructure has nested citeStructure"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:contains('citeStructure')"/>
        <!-- dive into level 2 citeStructure -->
        <x:expect label="only one level 2 citeStructure"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:get('citeStructure') => array:size()"
            select="1"/>
        <x:expect label="level 2 citeStructure has @type"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:get('citeStructure') => array:get(1) => map:contains('@type')"/>
        <x:expect label="level 2 citeStructure has citeType"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:get('citeStructure') => array:get(1) => map:contains('citeType')"/>
        <x:expect label="level 2 citeStructure has citeStructure"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:get('citeStructure') => array:get(1) => map:get('citeStructure') => array:get(1) => map:contains('citeStructure')"
        />
    </x:scenario>

    <x:scenario label="members in 4ezr.xml">
        <x:context href="../test/4ezr.xml"/>
        <!-- diving into member 1 -->
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="10"/>
        <x:expect label="member 1 has identifier"
            test="map:get(., 'member') => array:get(1) => map:contains('identifier')"/>
        <x:expect label="member 1 has @type"
            test="map:get(., 'member') => array:get(1) => map:contains('@type')"/>
        <x:expect label="member 1 has level"
            test="map:get(., 'member') => array:get(1) => map:contains('level')"/>
        <x:expect label="member 1 has parent"
            test="map:get(., 'member') => array:get(1) => map:contains('parent')"/>
        <x:expect label="member 1 has citeType"
            test="map:get(., 'member') => array:get(1) => map:contains('citeType')"/>
        <x:expect label="member 1 is first in document order"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'4 Ezra'"/>
        <x:expect label="member 1 is a CiteableUnit"
            test="map:get(., 'member') => array:get(1) => map:get('@type') => string()"
            select="'CiteableUnit'"/>
        <x:expect label="member 1 is in level 1"
            test="map:get(., 'member') => array:get(1) => map:get('level')" select="1"/>
        <x:expect label="member 1 has no parent"
            test="map:get(., 'member') => array:get(1) => map:get('parent')" select="()"/>
        <x:expect label="member 1 has correct citeType"
            test="map:get(., 'member') => array:get(1) => map:get('citeType') => string()"
            select="'book'"/>
    </x:scenario>

    <x:scenario label="default citation tree: default citation tree of matt.xml">
        <x:context href="../test/matt.xml"/>
        <x:expect label="has 2 citationTrees"
            test="map:get(., 'resource') => map:get('citationTrees') => array:size()" select="2"/>
        <x:expect label="1st CitationTree is the default citation tree and thus has no identifier"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:contains('identifier') => not()"/>
        <x:expect label="2nd CitationTree has identifier"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(2) => map:contains('identifier')"/>
        <x:expect label="2nd CitationTree has identifier 'pages'"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(2) => map:get('identifier') => string()"
            select="'pages'"/>
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="15"/>
    </x:scenario>

    <x:scenario label="named citation tree: 'pages' citation tree of matt.xml">
        <x:param name="tree" select="'pages'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="has 2 citationTrees"
            test="map:get(., 'resource') => map:get('citationTrees') => array:size()" select="2"/>
        <x:expect label="1st CitationTree is the default citation tree and thus has no identifier"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(1) => map:contains('identifier') => not()"/>
        <x:expect label="2nd CitationTree has identifier"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(2) => map:contains('identifier')"/>
        <x:expect label="2nd CitationTree has identifier 'pages'"
            test="map:get(., 'resource') => map:get('citationTrees') => array:get(2) => map:get('identifier') => string()"
            select="'pages'"/>
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="2"/>
    </x:scenario>

    <x:scenario label="from start to end in matt.xml">
        <x:param name="start" select="'Matt:1:3'"/>
        <x:param name="end" select="'Matt:2:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="4"/>
        <x:expect label="only level 3 members"
            test="map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level')})"
            select="array {3, 3, 3, 3}"/>
        <x:expect label="start is first member"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'Matt:1:3'"/>
        <x:expect label="end is last member"
            test="map:get(., 'member') => array:get(4) => map:get('identifier') => string()"
            select="'Matt:2:2'"/>
    </x:scenario>

    <x:scenario label="from start to end in matt.xml with end a last child">
        <x:param name="start" select="'Matt:1:3'"/>
        <x:param name="end" select="'Matt:2:3'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="6"/>
        <x:expect label="only level 2 and 3 members"
            test="map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level')})"
            select="array {3, 3, 2, 3, 3, 3}"/>
        <x:expect label="start is first member"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'Matt:1:3'"/>
        <x:expect label="end is last member"
            test="map:get(., 'member') => array:get(6) => map:get('identifier') => string()"
            select="'Matt:2:3'"/>
    </x:scenario>

    <x:scenario label="from start to end in matt.xml with start first child and end a last child">
        <x:param name="start" select="'Matt:2:1'"/>
        <x:param name="end" select="'Matt:2:3'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="3"/>
        <x:expect label="only level 2 and 3 members"
            test="map:get(., 'member') => array:for-each(function ($x) {map:get($x, 'level')})"
            select="array {3, 3, 3}"/>
        <x:expect label="start is first member"
            test="map:get(., 'member') => array:get(1) => map:get('identifier') => string()"
            select="'Matt:2:1'"/>
        <x:expect label="end is last member"
            test="map:get(., 'member') => array:get(3) => map:get('identifier') => string()"
            select="'Matt:2:3'"/>
    </x:scenario>

    <x:scenario label="ref in matt.xml">
        <x:param name="ref" select="'Matt:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="correct count of members" test="map:get(., 'member') => array:size()"
            select="4"/>

    </x:scenario>

</x:description>
