<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec"
    xmlns:map="http://www.w3.org/2005/xpath-functions/map"
    xmlns:array="http://www.w3.org/2005/xpath-functions/array"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:dts="https://w3id.org/api/dts#"
    xmlns:t="http://www.tei-c.org/ns/1.0" stylesheet="document.xsl" run-as="external">

    <x:variable name="x:saxon-config" href="../test/saxon.xml"/>

    <x:scenario label="whole document as source matt.xml">
        <x:context href="../test/matt.xml"/>
        <x:expect label="identity" href="../test/matt.xml"/>
    </x:scenario>

    <x:scenario label="initial template: whole document matt.xml">
        <x:param name="resource" select="'../test/matt.xml'"/>
        <x:call xmlns:xsl="http://www.w3.org/1999/XSL/Transform" template="xsl:initial-template"/>
        <x:expect label="identity" href="../test/matt.xml"/>
    </x:scenario>

    <x:scenario label="$ref on matt.xml results in dts:wrapper element in TEI root">
        <x:param name="ref" select="'Matt:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="TEI root element" test="exists(/*/self::t:TEI)"/>
        <x:expect label="has /TEI/dts:wrapper" test="exists(/t:TEI/dts:wrapper)"/>
        <x:expect label="dts:wrapper has the dts prefix"
            test="/t:TEI/dts:wrapper => node-name() => prefix-from-QName() => string()"
            select="'dts'"/>
        <x:expect label="/TEI has only on child element" test="count(/t:TEI/*)" select="1"/>
    </x:scenario>

    <x:scenario
        label="request plain text as $mediaType and $ref on matt.xml results in non-standard root"
        pending="move this test out of here">
        <x:param name="mediaType" select="'text/plain'"/>
        <x:param name="ref" select="'Matt:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="no TEI root element" test="exists(/*/self::t:TEI) => not()"/>
        <x:expect label="no /TEI/dts:wrapper" test="exists(/t:TEI/dts:wrapper) => not()"/>
        <x:expect label="selected div at root" test="exists(/*/self::t:div)"/>
    </x:scenario>

    <x:scenario label="$ref with Matt:2 on matt.xml result in Matt:2 in dts:wrapper">
        <x:param name="ref" select="'Matt:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="identical content" href="../test/matt.xml" test="/t:TEI/dts:wrapper/*"
            select="//t:body/t:div[1]/t:div[2]"/>
    </x:scenario>

    <x:scenario label="$start and $end on matt.xml">
        <x:param name="start" select="'Matt:1:2'"/>
        <x:param name="end" select="'Matt:2:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="TEI root element" test="exists(/*/self::t:TEI)"/>
        <x:expect label="has /TEI/dts:wrapper" test="exists(/t:TEI/dts:wrapper)"/>
        <x:expect label="dts:wrapper has the dts prefix"
            test="/t:TEI/dts:wrapper => node-name() => prefix-from-QName() => string()"
            select="'dts'"/>
        <x:expect label="count of element nodes in dts:wrapper" test="count(/t:TEI/dts:wrapper/*)"
            select="6"/>
    </x:scenario>

    <!-- Should Matt:2 be included, when Matt:2:3 was the final node in Matt:2? -->
    <x:scenario
        label="$start and $end on matt.xml; end on final element in container, but not on final node">
        <x:param name="start" select="'Matt:1:2'"/>
        <x:param name="end" select="'Matt:2:3'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="count of element nodes in dts:wrapper" test="count(/t:TEI/dts:wrapper/*)"
            select="7"/>
    </x:scenario>

    <x:scenario label="Regression against issue 4: $start and $end on john.xml; page-hateoas">
        <x:param name="start" select="'p.2.start'"/>
        <x:param name="end" select="'p.2.end'"/>
        <x:param name="tree" select="'page-hateoas'"/>
        <x:context href="../test/john.xml"/>
        <x:expect label="contains pb of page 1" test="exists(/t:TEI/dts:wrapper//t:pb[@n eq 2])"/>
        <x:expect label="contains one pb element" test="count(//t:pb)" select="1"/>
    </x:scenario>

    <x:scenario
        label="Regression against issue 4: $start and $end on john.xml from different levels; page-hateoas">
        <x:param name="start" select="'p.2'"/>
        <x:param name="end" select="'p.2.end'"/>
        <x:param name="tree" select="'page-hateoas'"/>
        <x:context href="../test/john.xml"/>
        <x:expect label="contains pb of page 1" test="exists(/t:TEI/dts:wrapper//t:pb[@n eq 2])"/>
        <x:expect label="contains one pb element" test="count(//t:pb)" select="1"/>
    </x:scenario>

    <x:scenario label="Regression against issue 4: $start and $end on matt.xml; pages">
        <x:param name="start" select="'p. 1'"/>
        <x:param name="end" select="'p. 2'"/>
        <x:param name="tree" select="'pages'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="contains pb of page 1" test="exists(/t:TEI/dts:wrapper//t:pb[@n eq 1])"/>
        <x:expect label="contains pb of page 2" test="exists(/t:TEI/dts:wrapper//t:pb[@n eq 2])"/>
        <x:expect label="contains 2 pb elements" test="count(//t:pb)" select="1"/>
    </x:scenario>


    <x:scenario label="error: $ref and $start + $end given" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="'Matt:2'"/>
        <x:param name="start" select="'Matt:1:2'"/>
        <x:param name="end" select="'Matt:2:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="400 error code" test="$x:result?err?code => string() => matches('400')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is"
            test="matches($x:result?err?value, 'bad parameter combination')"/>
    </x:scenario>

    <x:scenario label="error: $start present, but $end not" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="()"/>
        <x:param name="start" select="'Matt:1:2'"/>
        <x:param name="end" select="()"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="400 error code" test="$x:result?err?code => string() => matches('400')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is"
            test="matches($x:result?err?value, 'bad parameter combination')"/>
    </x:scenario>

    <x:scenario label="error: $start not present, but $end" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="()"/>
        <x:param name="start" select="()"/>
        <x:param name="end" select="'Matt:1:2'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="400 error code" test="$x:result?err?code => string() => matches('400')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is"
            test="matches($x:result?err?value, 'bad parameter combination')"/>
    </x:scenario>


    <x:scenario label="error: member specified by $ref not found" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="'Matt:42'"/>
        <x:param name="start" select="()"/>
        <x:param name="end" select="()"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="404 error code" test="$x:result?err?code => string() => matches('404')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is" test="matches($x:result?err?value, 'not found')"/>
    </x:scenario>

    <x:scenario label="error: member specified by $start not found" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="()"/>
        <x:param name="start" select="'Matt:1:42'"/>
        <x:param name="end" select="'Matt:2:3'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="404 error code" test="$x:result?err?code => string() => matches('404')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is" test="matches($x:result?err?value, 'not found')"/>
    </x:scenario>

    <x:scenario label="error: member specified by $end not found" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="()"/>
        <x:param name="start" select="'Matt:1:3'"/>
        <x:param name="end" select="'Matt:42'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="404 error code" test="$x:result?err?code => string() => matches('404')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is" test="matches($x:result?err?value, 'not found')"/>
    </x:scenario>


    <x:scenario label="error: $tree not found" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="()"/>
        <x:param name="start" select="'Matt:1:2'"/>
        <x:param name="end" select="'Matt:2:3'"/>
        <x:param name="tree" select="'zebra'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="404 error code" test="$x:result?err?code => string() => matches('404')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is" test="matches($x:result?err?value, 'not found')"/>
    </x:scenario>


    <x:scenario label="error: $mediaType not supported" catch="yes">
        <x:param name="down" select="()"/>
        <x:param name="ref" select="()"/>
        <x:param name="start" select="()"/>
        <x:param name="end" select="()"/>
        <x:param name="tree" select="()"/>
        <x:param name="mediaType" select="'application/json'"/>
        <x:context href="../test/matt.xml"/>
        <x:expect label="throws error" test="exists($x:result?err?code)"/>
        <x:expect label="404 error code" test="$x:result?err?code => string() => matches('404')"
            pending="issue 1"/>
        <x:expect label="has error message" test="exists($x:result?err?description)"/>
        <x:expect label="error message is" test="matches($x:result?err?value, 'not supported')"/>
    </x:scenario>

</x:description>
